#pragma kernel CSMain
#define GROUP_SIZE 256

struct Boid
{
    float3 position;
    float3 direction;
};

RWStructuredBuffer<Boid> boidsBuffer;

float deltaTime;
float boidSpeed;
float3 flockPosition;
float neighbourDistance;
int boidsCount;

[numthreads(GROUP_SIZE,1,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    Boid boid = boidsBuffer[id.x];
    float3 separation = 0;
    float3 alignment = 0;
    float3 cohesion = flockPosition;
    uint nearbyCount = 1;

    for (int i = 0; i < boidsCount; i++)
    {
        if (i == id.x)
            continue;
        Boid tempBoid = boidsBuffer[i];

        float3 tempBoid_position = tempBoid.position;
        float3 offset = boid.position - tempBoid_position;
        float dist = max(length(offset), 0.000001); // 防止 offset 为 0，下面做除法分母

        if (dist < neighbourDistance)
        {
            separation += offset * (1.0 / dist - 1.0 / neighbourDistance); // 两个 boid 越接近，产生的 separation 越大
            alignment += boidsBuffer[i].direction;
            cohesion += tempBoid_position;

            nearbyCount += 1;
        }
    }

    float avg = 1.0 / nearbyCount;
    alignment *= avg;
    cohesion *= avg;
    cohesion = normalize(cohesion - boid.position);
    float3 direction = alignment + separation + cohesion;
    boid.direction = lerp(direction, normalize(boid.direction), 0.94);
    boid.position += boid.direction * boidSpeed * deltaTime;

    boidsBuffer[id.x] = boid;
}
